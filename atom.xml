<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宁静之地</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-07T13:16:24.806Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Siwei Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day11</title>
    <link href="http://yoursite.com/2018/08/07/day11/"/>
    <id>http://yoursite.com/2018/08/07/day11/</id>
    <published>2018-08-07T10:57:15.000Z</published>
    <updated>2018-08-07T13:16:24.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>equals 和toString方法</li><li>Date 与SimpleDateFormat</li><li>Calendar</li><li>System</li><li>StringBuilder 和StringBuffer</li><li>字符串转换为其他类型</li><li>链表</li></ul><p><strong>Equals and toString</strong></p><ol><li>toString :用来打印对象的结果</li><li>如果不指定就默认继承Object类的toString 方法，打印的就是 包名+类名+@+hash地址值</li><li>根据自定义需求打印对象的结果需要重写toString</li></ol><blockquote><p>equals 方法与== 有什么区别？</p></blockquote><ul><li>==比较两个对象的地址值，equals方法属于object，如果不去重写就是比较的地址，当然我们可以自定义重写equals来完成比较策略，比如String 类就重写了，所以比较的是内容</li></ul><p><strong>Date 与SimpleDateFormat</strong></p><ol><li><p>构造函数</p><ul><li>new Date()</li><li>new Date(long 毫秒数)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();<span class="comment">//当前时间</span></span><br><span class="line">        System.out.println(date.getTime());</span><br><span class="line">        System.out.println(date.toString());  </span><br><span class="line">        <span class="comment">//1970 1 1 0:0:0   </span></span><br><span class="line">        <span class="comment">//毫秒数从1970年1月1日开始计算 东八区   </span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">0</span>);<span class="comment">//   </span></span><br><span class="line">        System.out.println(date2.getTime());  </span><br><span class="line">        System.out.println(date2.toString());   </span><br><span class="line">        <span class="comment">//把时间转换为字符串形式 SimpleDateFormart   </span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();  </span><br><span class="line">        String str = sdf.format(date);</span><br><span class="line">        System.out.println(str);  </span><br><span class="line">        <span class="comment">//需要自定义格式 y 表示年 M 月 d day hh:mm:ss E</span></span><br><span class="line">        SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss E"</span>);  </span><br><span class="line">        String str2 = sdf2.format(date);  </span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="comment">//把字符串转换为日期   指定的转换格式必须跟字符串的格式相同   </span></span><br><span class="line">        SimpleDateFormat sdf3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        String str4 = <span class="string">"1970-01-01 08:01:00"</span>; </span><br><span class="line">        Date date4 = sdf3.parse(str4);<span class="comment">//ParseException转换异常</span></span><br><span class="line">        System.out.println(date4.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">String birthday = <span class="string">"2000-01-01"</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">//求出毫秒数</span></span><br><span class="line">System.out.println((<span class="keyword">new</span> Date().getTime()-sdf.parse(birthday).getTime())/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br></pre></td></tr></table></figure></li></ol><p><strong>Calendar </strong></p><ol><li>getInstance()</li><li>setTime(Date date); //设置时间</li><li>public void set(int field, int value)//给指定的日历字段设置为给定的值</li><li>public abstract void add(int field, int amout)//根据日历规则，将指定的时间量添加或减去给定日历字段</li><li>public Date getTime(); //返回一个表示此Calendar 时间值（从历元到现在的毫秒便宜量）的Date对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//获得日历对象</span></span><br><span class="line">        Calendar calendar  =Calendar.getInstance();</span><br><span class="line">        <span class="comment">//calendar.setTime(new Date(0));//1970 01 01 08:00:00</span></span><br><span class="line">        <span class="comment">//calendar.setTimeInMillis(0);</span></span><br><span class="line">        <span class="keyword">int</span> year= calendar.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        System.out.println(calendar.get(Calendar.MONTH)+<span class="number">1</span>);<span class="comment">// 外国0-11</span></span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        System.out.println(calendar.get(Calendar.DAY_OF_WEEK));<span class="comment">//从周日开始算 周日就是1</span></span><br><span class="line">        calendar.set(Calendar.YEAR,<span class="number">2017</span>);<span class="comment">//设置年</span></span><br><span class="line">        System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line">        <span class="comment">//在2017年的基础上 加一年 减一年</span></span><br><span class="line">        calendar.add(Calendar.YEAR,<span class="number">1</span>);</span><br><span class="line">        System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line">        calendar.add(Calendar.YEAR,-<span class="number">2</span>);</span><br><span class="line">        System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line">        <span class="comment">//返回date类型的值</span></span><br><span class="line">        Date date  = calendar.getTime();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">//获得毫秒数</span></span><br><span class="line">        System.out.println(calendar.getTimeInMillis())；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>System</strong></p><p>public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</p><table><thead><tr><th><strong>参数序号</strong></th><th><strong>参数名称</strong></th><th><strong>参数类型</strong></th><th><strong>参数含义</strong></th></tr></thead><tbody><tr><td>1</td><td>src</td><td>Object</td><td>源数组</td></tr><tr><td>2</td><td>srcPos</td><td>int</td><td>源数组索引起始位置</td></tr><tr><td>3</td><td>dest</td><td>Object</td><td>目标数组</td></tr><tr><td>4</td><td>destPos</td><td>int</td><td>目标数组索引起始位置</td></tr><tr><td>5</td><td>length</td><td>int</td><td>复制元素个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> arr2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"> System.out.println(Arrays.toString(arr));</span><br><span class="line"> System.out.println(Arrays.toString(arr2));</span><br><span class="line"> <span class="comment">//从arr复制到arr2</span></span><br><span class="line">System.arraycopy(arr,<span class="number">1</span>,arr2,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line"> System.out.println(Arrays.toString(arr));</span><br><span class="line"> System.out.println(Arrays.toString(arr2));</span><br></pre></td></tr></table></figure><blockquote><p>currentTimeMillis 获取当前的毫秒<br>gc()垃圾回收相关<br>exit(0) 退出系统<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//System.gc();//垃圾回收  调用了也不会立即回收  只是我们通知jvm可以回收</span></span><br><span class="line"><span class="keyword">long</span> beginTime = System.currentTimeMillis*();<span class="comment">//获得当前时间的毫秒数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;   </span><br><span class="line">    System.out.print(<span class="string">" "</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">long</span> endTime  = System.currentTimeMillis();  <span class="comment">//System.out.println(endTime);  </span></span><br><span class="line">System.out.println(<span class="string">"for循环用了"</span>+(endTime-beginTime)+<span class="string">"毫秒"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>StringBuilder/StringBuffer</strong></p><ol><li><p>StringBuilder/Stringbuffer，String 的区别</p><ul><li><p>前者可变字符串，后者不可变，String的源码是final byte value[],用intern() 方法强制放入常量池</p></li><li><p>实际应用：</p><blockquote><p>拼接sql字符串，只要拼接成功的最后的字符串，因为String不可变，就可以避免在堆内存中创建无用的对象</p></blockquote></li><li><p>StringBuffer 线程安全,效率低</p></li><li><p>StringBuilder线程不安全，效率高</p></li></ul></li><li><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            str.append(i);<span class="comment">//字符串拼接 abc0 abc01</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        String str1 = str.toString();<span class="comment">//转成string对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"hello"</span>;<span class="comment">//0x001</span></span><br><span class="line">    String s2 = <span class="string">"world"</span>;</span><br><span class="line">    System.out.println(s1 + <span class="string">"---"</span> + s2);<span class="comment">//hello--word</span></span><br><span class="line">    change(s1, s2);</span><br><span class="line">    System.out.println(s1 + <span class="string">"---"</span> + s2);<span class="comment">//hello--word</span></span><br><span class="line">    StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);<span class="comment">//0x001</span></span><br><span class="line">    StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">"world"</span>);<span class="comment">//0x002</span></span><br><span class="line">    System.out.println(sb1 + <span class="string">"---"</span> + sb2);<span class="comment">// hello word</span></span><br><span class="line">    change(sb1, sb2);</span><br><span class="line">    System.out.println(sb1 + <span class="string">"---"</span> + sb2);<span class="comment">//hello---worldworld</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x001---0x002           0x002</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer sb1, StringBuffer sb2)</span> </span>&#123;</span><br><span class="line">    sb1 = sb2;<span class="comment">//把sb2的地址给了sb1</span></span><br><span class="line">    sb1.append(sb2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    s1 = s2;</span><br><span class="line">    s2 = s1 + s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>字符串转换成其他类型</strong></p><blockquote><p>所有的方法都是包装类型的parseXXX </p><p> Double.parseDouble  Long.parseLong  Boolean.parseBoolean    </p><p>public static byte parseByte(String s) ：将字符串参数转换为对应的byte基本类型。</p><p>public static short parseShort(String s) ：将字符串参数转换为对应的short基本类型。</p><p>public static int parseInt(String s) ：将字符串参数转换为对应的int基本类型。</p><p>public static long parseLong(String s) ：将字符串参数转换为对应的long基本类型。 </p><p>public static float parseFloat(String s) ：将字符串参数转换为对应的ﬂoat基本类型。</p><p>public static double parseDouble(String s) ：将字符串参数转换为对应的double基本类型。</p><p>public static boolean parseBoolean(String s) ：将字符串参数转换为对应的boolean基本类型。</p></blockquote><p><strong>单向链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//携带的数据 任何数据   object</span></span><br><span class="line">    <span class="keyword">private</span> Node next;<span class="comment">//通过现在的结点 可以取到下一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>遍历节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建结点  就是一个链表    链表中只有一个节点 那么应该指向null</span></span><br><span class="line">        Node node1 = <span class="keyword">new</span> Node(<span class="string">"链表节点一。。。"</span>,<span class="keyword">null</span>);<span class="comment">//单节点</span></span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="string">"链表节点二。。。"</span>,<span class="keyword">null</span>);<span class="comment">//单节点</span></span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="string">"链表节点三。。。"</span>,<span class="keyword">null</span>);<span class="comment">//单节点</span></span><br><span class="line">        Node node4 = <span class="keyword">new</span> Node(<span class="string">"链表节点四。。。"</span>,<span class="keyword">null</span>);<span class="comment">//单节点</span></span><br><span class="line">        <span class="comment">//把节点整合在一起就是一个链表   node1----&gt;node2----&gt;node3----&gt;node4</span></span><br><span class="line">        node1.setNext(node2);</span><br><span class="line">        node2.setNext(node3);</span><br><span class="line">        node3.setNext(node4);</span><br><span class="line">        <span class="comment">//遍历链表（指向为null就结束了）    知道头节点</span></span><br><span class="line">        Node node=node1;<span class="comment">//用来遍历  等于头节点</span></span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           System.out.println(node);</span><br><span class="line">           node=node.getNext();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习： 翻转链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node node)</span></span>&#123;<span class="comment">// 把node1传给我 把node1这个链表翻转后  把头节点(nodeN) 返回</span></span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>||node.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;<span class="comment">//需要翻转的链表为null或者只有一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    Node head = node;<span class="comment">//头节点</span></span><br><span class="line">    Node preHead=node;<span class="comment">//保存的第一个节点</span></span><br><span class="line">    Node curHead=node.getNext();<span class="comment">//当前节点  2个节点</span></span><br><span class="line">    Node postHead=curHead.getNext();<span class="comment">//第三个节点</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        curHead.setNext(preHead);</span><br><span class="line">        <span class="keyword">if</span>(postHead==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preHead=curHead;<span class="comment">//上一个节点 就变为第二个</span></span><br><span class="line">        curHead=postHead;<span class="comment">//当前节点就变为第三个</span></span><br><span class="line">        postHead=postHead.getNext();<span class="comment">//下一个节点 4</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// curHead.setNext(preHead);</span></span><br><span class="line">    head.setNext(<span class="keyword">null</span>);<span class="comment">//把第一个节点指向null</span></span><br><span class="line">    <span class="keyword">return</span> curHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;equals 和toString方法&lt;/li&gt;
&lt;li&gt;Date 与SimpleDateFormat&lt;/li&gt;
&lt;li&gt;Cale
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>window7配置命令行字体</title>
    <link href="http://yoursite.com/2018/08/06/window7%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AD%97%E4%BD%93/"/>
    <id>http://yoursite.com/2018/08/06/window7配置命令行字体/</id>
    <published>2018-08-06T10:57:15.000Z</published>
    <updated>2018-08-07T13:16:31.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window7配置命令行字体"><a href="#window7配置命令行字体" class="headerlink" title="window7配置命令行字体"></a>window7配置命令行字体</h2><ul><li><p>打开注册表定位至[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont] </p></li><li><p>新建一项添加你的字体</p></li><li><p>用chcp命令切换代码页</p></li><li><p>代码页</p></li><li><p>OEM（IBM PC）代码页</p><ul><li>[437]—最初的IBM PC代码页，实现了扩展ASCII字符集</li><li>[737]—[希腊语]</li><li>[850—“[多语言]（[Latin-1]（[西欧]语言）</li><li>[852]—[斯拉夫]（[Latin-2]（[中欧]及[东欧]语言）</li><li>[855]—[西里尔（Cyril）字母]</li><li>[857]—[土耳其语]</li><li>[858])—带[欧元]符号的“多语言”</li><li>[860]—[葡萄牙语]</li><li>[861]—冰岛语</li><li>[863]—法语加拿大英语</li><li>[865]—[北欧]</li><li>[866]—[西里尔（Cyril）字母]</li><li>[869]—[希腊语]</li></ul></li></ul><ul><li>color tool 修改配色,下载地址：<a href="https://github.com/Microsoft/console/tree/master/tools/ColorTool" target="_blank" rel="noopener">https://github.com/Microsoft/console/tree/master/tools/ColorTool</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;window7配置命令行字体&quot;&gt;&lt;a href=&quot;#window7配置命令行字体&quot; class=&quot;headerlink&quot; title=&quot;window7配置命令行字体&quot;&gt;&lt;/a&gt;window7配置命令行字体&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开注册表定位至[HKEY
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Understanding about static</title>
    <link href="http://yoursite.com/2018/08/02/%E5%85%B3%E4%BA%8Ejava-static%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/02/关于java-static的理解/</id>
    <published>2018-08-02T10:57:15.000Z</published>
    <updated>2018-08-02T12:14:34.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Static-keyword"><a href="#Static-keyword" class="headerlink" title="Static keyword"></a><strong>Static keyword</strong></h2><blockquote><p>static 关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例的情况下直接被访问</p></blockquote><h3 id="Static-demo"><a href="#Static-demo" class="headerlink" title="Static demo"></a>Static demo</h3><ul><li>T1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test t1= <span class="keyword">new</span> Test();</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test t2 = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果输出</p><blockquote><p>111<br>222<br>111</p></blockquote></li><li><p>T2</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    Base() &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类的静态函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    Test2() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的静态函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test = <span class="keyword">new</span> Test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果输出</p><blockquote><p>基类的静态函数<br>Test 类的静态函数<br>基类的构造函数<br>Test 类的构造函数</p></blockquote></li><li><p>T3</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> </span>&#123;</span><br><span class="line">    Base2() &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类的静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"基类的构造函数块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> <span class="keyword">extends</span> <span class="title">Base2</span> </span>&#123;</span><br><span class="line">    Test3() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Test 类的构造函数块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test3();</span><br><span class="line">        System.out.println(<span class="string">"//**********"</span>);</span><br><span class="line">        <span class="keyword">new</span> Test3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果</p><blockquote><p>基类的静态代码块<br>Test 类的静态代码块<br>基类的构造函数块<br>基类的构造函数<br>Test 类的构造函数块<br>Test 类的构造函数<br>//**********<br>基类的构造函数块<br>基类的构造函数<br>Test 类的构造函数块<br>Test 类的构造函数</p></blockquote></li><li><p>T4</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Z();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    Y y = <span class="keyword">new</span> Y();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">X</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"X"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Y</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    Y y = <span class="keyword">new</span> Y();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Z</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"Z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>输出结果</p><blockquote><p>Y<br>X<br>Y<br>Z</p></blockquote></li><li><p>T5</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> k = <span class="number">0</span>;                        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person t1 = <span class="keyword">new</span> Person(<span class="string">"t1"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person t2 = <span class="keyword">new</span> Person(<span class="string">"t2"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = print(<span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> j = print(<span class="string">"j"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"构造块"</span>);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        print(<span class="string">"静态块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">" i="</span> + i + <span class="string">" n="</span> + n);</span><br><span class="line">        ++n;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println((++k) + <span class="string">":"</span> + str + <span class="string">" i="</span> + i + <span class="string">" n="</span> + n);</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">return</span> ++n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person t = <span class="keyword">new</span> Person(<span class="string">"init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果<blockquote><p>1:j i=0 n=0<br>2:构造块 i=1 n=1<br>3:t1 i=2 n=2<br>4:j i=3 n=3<br>5:构造块 i=4 n=4<br>6:t2 i=5 n=5<br>7:i i=6 n=6<br>8:静态块 i=7 n=99<br>9:j i=8 n=100<br>10:构造块 i=9 n=101<br>11:init i=10 n=102</p></blockquote></li></ul><p>一开始做这些题目的时候一脸懵逼：但其实只要遵循下面几条规则就能轻易的做出来</p><ul><li>被static修饰的所有东西都是在创建对象之前，随着类的加载并且只会执行一次</li><li>非static修饰的每次创建对象都会执行</li><li>构造方法执行之前一定会先初始化普通变量与构造代码块</li><li>static代码块与static成员变量是一个级别，谁在前先执行谁构造代码块与成员变量一个级别</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Static-keyword&quot;&gt;&lt;a href=&quot;#Static-keyword&quot; class=&quot;headerlink&quot; title=&quot;Static keyword&quot;&gt;&lt;/a&gt;&lt;strong&gt;Static keyword&lt;/strong&gt;&lt;/h2&gt;&lt;blockqu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/02/hello-world/"/>
    <id>http://yoursite.com/2018/08/02/hello-world/</id>
    <published>2018-08-02T00:36:32.925Z</published>
    <updated>2018-08-02T05:33:11.209Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
